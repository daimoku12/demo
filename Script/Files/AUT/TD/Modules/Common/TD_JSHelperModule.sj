//USEUNIT GlobalIncludes
//USEUNIT TD_GlobalVariables

function createMockData(gridName)
{
  try
  {
    var src = "class ProviderClientMock {\r\n    constructor() {\r\n        this.providerClient = TD.services.services.get('dataBootstrapService')['providerClient'];\r\n        this.providerStatusSubject = this.providerClient['providerStatusSubject'];\r\n        this.isOnline = true;\r\n    }\r\n\r\n    getStatus() { \r\n        return this.isOnline;\r\n    }\r\n\r\n    setOnline() {\r\n        this.providerStatusSubject.next('Online');\r\n        this.isOnline = true;\r\n    }\r\n\r\n    setOffline() {\r\n        this.providerStatusSubject.next('Offline');\r\n        this.isOnline = false;\r\n    }\r\n}\r\n\r\nclass DataServiceMock {\r\n    constructor() {\r\n        this.ds = TD.services.services.get('dataService');\r\n        this.isOnline = true;\r\n        this.requests = new Map();\r\n        // add any existing subscriptions from dataservice to local array\r\n\r\n        // set the dataservice to be online\r\n\t\tthis.setOffline();\r\n        this.setOnline();\r\n        // overwrite the original subscribe method with our new method\r\n        this.ds.subscribe = this.subscribe.bind(this);\r\n\r\n        TD.services.services.get('gridService').getApi().then(api => {\r\n            this.api = api;\r\n        });\r\n    }\r\n\r\n    getStatus() { \r\n        return this.isOnline;\r\n    }\r\n    \r\n    setOnline() {\r\n        console.log('Connection is online');\r\n        this.ds.liberatorService['isLoggedInSubject'].next(true);\r\n        this.isOnline = true;\r\n    }\r\n\r\n    setOffline() {\r\n        console.log('Connection is offline');\r\n\t\tthis.ds.liberatorService['isLoggedInSubject'].next(false);\r\n        this.isOnline = false;\r\n\t\tthis.requests.delete('mainViewData');\r\n    }\r\n\r\n    getSubscription(id) {\r\n        const existingSubscription = this.requests.get(id);\r\n        if (existingSubscription) {\r\n            return existingSubscription;\r\n        }\r\n    }\r\n\r\n    subscribe(dataConfig, id){\r\n        if (!id) {\r\n            console.error('Please supply an id for the subscription');\r\n            return;\r\n        }\r\n\r\n        const existingSubscription = this.getSubscription(id);\r\n        if (existingSubscription) {\r\n            if (existingSubscription.subscriptionIsClosed !== undefined) {\r\n                // When coming back online, all subscriptions are removed\r\n                // and this flag is set to true.\r\n                existingSubscription.subscriptionIsClosed = false;\r\n            }\r\n            return Promise.resolve(existingSubscription);\r\n        }\r\n\r\n        const recordUpdate$ = new TD.services.serviceSubject.__proto__.constructor();\r\n        const subscription = {\r\n            recordUpdate$,\r\n            recordUpdateSubject: recordUpdate$,\r\n            subscriptionError$: new TD.services.serviceSubject.__proto__.constructor(),\r\n            containerUpdate$: new TD.services.serviceSubject.__proto__.constructor(),\r\n            isActive$: this.ds.isOnline$,\r\n            subscriptionStatus$: new TD.services.serviceSubject.__proto__.constructor(),\r\n            start: () => recordUpdate$,\r\n            stop: () => { },\r\n            close: () => { },\r\n            dataConfig\r\n        };\r\n\r\n        this.requests.set(id, subscription);\r\n        return Promise.resolve(subscription);\r\n    }\r\n\r\n    setMainRows(rows) {\r\n        this.setRows(rows, 'mainViewData');\r\n    }\r\n\r\n    setRows(rows, id) {\r\n        if (!id) {\r\n            console.error('Please supply an id for the subscription');\r\n            return;\r\n        }\r\n\r\n        const existingSubscription = this.getSubscription(id);\r\n        if (!existingSubscription) {\r\n            console.error('No subscription found with the id: ' + id);\r\n            return;\r\n        }\r\n\r\n        rows.forEach(row => {\r\n            existingSubscription.recordUpdateSubject.next(row);\r\n        });\r\n    }\r\n\r\n    clearRows() {\r\n        if(this.api){\r\n            this.api.setRowData([]);\r\n            return;\r\n        }\r\n        console.error('Api not ready not able to clear rows');\r\n    }\r\n\r\n    getRows() {\r\n        let rows = [];\r\n        let success = true;\r\n        let error = '';\r\n        if (this.api){\r\n            this.api.forEachNode(node => rows.push(node.data));\r\n\r\n        } else {\r\n            success = false;\r\n            error = 'Api is not ready'\r\n        }\r\n        const result = {\r\n            success,\r\n            error,\r\n            rows\r\n        }\r\n\r\n        return JSON.stringify(result);\r\n    }\r\n}\r\n\r\ndataServiceMock = new DataServiceMock();\r\nproviderClientMock = new ProviderClientMock();\r\n\r\nmodule.exports = {\r\n    DataServiceMock: DataServiceMock,\r\n    ProviderClientMock: ProviderClientMock\r\n}";
    var page = Sys.Process("Citi.TD.ElectronWindowServer").FindChild("Name", 'Frame(0)', MAX_CHILDS);
    page.contentDocument.Script.eval(src);
    Delay(20000);
    
    switch (gridName)
    {
      case "Agency_SMS_Contribution/Negotiation Definition (Web)":
      {
        var data = "  dataServiceMock.setMainRows([\r\n  {\r\n    \"HierarchyInfo_Id\": \"CALLABLE\",\r\n\t\"SMS2_AGCY_GroupStream_Market\": \"BLOOMBERG\",\r\n    \"SMS2_AGCY_GroupStream_StreamCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_Active\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_BidSize\": \"9988\",\r\n    \"SMS2_AGCY_GroupStream_AskSize\": \"9955\",\r\n\t\"SMS2_AGCY_GroupStream_StreamND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoRespond\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoPassSize\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_MaxBidAutoResponseSize\": \"111\",\r\n\t\"SMS2_AGCY_GroupStream_MaxAskAutoResponseSize\": \"50\",\r\n\t\"_id\": \"1\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n    \"HierarchyInfo_Id\": \"BULLET\",\r\n\t\"SMS2_AGCY_GroupStream_Market\": \"TRADEWEB\",\r\n    \"SMS2_AGCY_GroupStream_StreamCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_Active\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_BidSize\": \"998\",\r\n    \"SMS2_AGCY_GroupStream_AskSize\": \"995\",\r\n\t\"SMS2_AGCY_GroupStream_StreamND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoRespond\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoPassSize\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_MaxBidAutoResponseSize\": \"114\",\r\n\t\"SMS2_AGCY_GroupStream_MaxAskAutoResponseSize\": \"70\",\r\n\t\"_id\": \"2\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n    \"HierarchyInfo_Id\": \"FLOATER\",\r\n\t\"SMS2_AGCY_GroupStream_Market\": \"BLOOMBERG\",\r\n    \"SMS2_AGCY_GroupStream_StreamCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_Active\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_BidSize\": \"9899\",\r\n    \"SMS2_AGCY_GroupStream_AskSize\": \"9956\",\r\n\t\"SMS2_AGCY_GroupStream_StreamND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoRespond\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoPassSize\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_MaxBidAutoResponseSize\": \"111\",\r\n\t\"SMS2_AGCY_GroupStream_MaxAskAutoResponseSize\": \"80\",\r\n\t\"_id\": \"3\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n    \"HierarchyInfo_Id\": \"STRIP\",\r\n\t\"SMS2_AGCY_GroupStream_Market\": \"BLOOMBERG\",\r\n    \"SMS2_AGCY_GroupStream_StreamCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_Active\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_BidSize\": \"988\",\r\n    \"SMS2_AGCY_GroupStream_AskSize\": \"955\",\r\n\t\"SMS2_AGCY_GroupStream_StreamND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoRespond\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoPassSize\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_MaxBidAutoResponseSize\": \"11\",\r\n\t\"SMS2_AGCY_GroupStream_MaxAskAutoResponseSize\": \"500\",\r\n\t\"_id\": \"4\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n    \"HierarchyInfo_Id\": \"AGCY\",\r\n\t\"SMS2_AGCY_GroupStream_Market\": \"TRADEWEB\",\r\n    \"SMS2_AGCY_GroupStream_StreamCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierCD\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_Active\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_BidSize\": \"9988\",\r\n    \"SMS2_AGCY_GroupStream_AskSize\": \"9955\",\r\n\t\"SMS2_AGCY_GroupStream_StreamND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_ClientTierND\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoRespond\": \"1\",\r\n\t\"SMS2_AGCY_GroupStream_AutoPassSize\": \"0\",\r\n\t\"SMS2_AGCY_GroupStream_MaxBidAutoResponseSize\": \"111\",\r\n\t\"SMS2_AGCY_GroupStream_MaxAskAutoResponseSize\": \"50\",\r\n\t\"_id\": \"5\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  }]);\r\n";
        page.contentDocument.Script.eval(data);
        Delay(1000);
        break;
      }

      case "IRS_Spread Increment Adjustment Grid":  
      {
        var data = "  dataServiceMock.setMainRows([{\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SmallSpreadIncrement\": \"0.004\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductSubGroup\": \"IRS\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductGroup\": \"DATA\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_BigSpreadIncrement\": \"0.004\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Currency\": \"USD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Market\": \"CITIVELOCITY\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SpreadIncrementGroup\": \"RFM\",\r\n    \"Entitlement Users\": \"jf53794, gw62135, rh27889, am87383\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Region\": \"NY\",\r\n\t\"_id\": \"1\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n  \"SMS2_USDIRS_SwapSpreadIncrement_SmallSpreadIncrement\": \"0.005\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductSubGroup\": \"BUTTERFLY\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductGroup\": \"DATA\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_BigSpreadIncrement\": \"0.005\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Currency\": \"USD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Market\": \"TRADEWEB\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SpreadIncrementGroup\": \"ROLL\",\r\n    \"Entitlement Users\": \"jf53794, gw62135, rh27889, am87383\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Region\": \"NY\",\r\n\t\"_id\": \"2\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n  \"SMS2_USDIRS_SwapSpreadIncrement_SmallSpreadIncrement\": \"0.003\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductSubGroup\": \"IMM\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductGroup\": \"DATA\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_BigSpreadIncrement\": \"0.003\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Currency\": \"USD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Market\": \"BLOOMBERG\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SpreadIncrementGroup\": \"\",\r\n    \"Entitlement Users\": \"jf53794, gw62135, rh27889, am87383\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Region\": \"NY\",\r\n\t\"_id\": \"3\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n  \"SMS2_USDIRS_SwapSpreadIncrement_SmallSpreadIncrement\": \"0.002\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductSubGroup\": \"SWAP_SPREAD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductGroup\": \"DATA\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_BigSpreadIncrement\": \"0.002\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Currency\": \"USD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Market\": \"CITIVELOCITY\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SpreadIncrementGroup\": \"\",\r\n    \"Entitlement Users\": \"jf53794, gw62135, rh27889, am87383\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Region\": \"NY\",\r\n\t\"_id\": \"4\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  },\r\n  {\r\n  \"SMS2_USDIRS_SwapSpreadIncrement_SmallSpreadIncrement\": \"0.001\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductSubGroup\": \"OIS\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_ProductGroup\": \"DATA\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_BigSpreadIncrement\": \"0.001\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Currency\": \"CAD\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Market\": \"BLOOMBERG\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_SpreadIncrementGroup\": \"RFM\",\r\n    \"Entitlement Users\": \"jf53794, gw62135, rh27889, am87383\",\r\n    \"SMS2_USDIRS_SwapSpreadIncrement_Region\": \"NY\",\r\n\t\"_id\": \"5\",\r\n\t\"_Active\": \"1\",\r\n    \"_Status\": \"STATUS_OK\"\r\n  }]);\r\n"; 
        page.contentDocument.Script.eval(data);
        Delay(1000);
        break;
      }
    } 
  }
  catch (e)
  {
    Log.Error(e);
  }
}

//rowIndex starts from 0
function readChainValues(rowIndex, columnDOMName)
{
  try
  {
    var rowIndex = aqConvert.IntToStr(rowIndex);
    var page = Sys.Process("Citi.TD.ElectronWindowServer").FindChild("Name", 'Frame(0)', 2000);
    var path = getDataRepositoryFolder() + "/TD/JavaScripts/ReadChainValues.js";
    path = vReplace(path, "/", "\\\\\\\\", false);
    path = path + "\\\\";
    page.contentDocument.Script.eval("require(\\\\" + aqString.Quote(path) + ")");
    Delay(2000);
    var values = page.contentDocument.Script.eval("chainValue.getCellValue(" + rowIndex + ", " + aqString.Quote(columnDOMName) + ")");
    Delay(500);
    return jsonParser(values, "data");
  }
  catch (e)
  {
    Log.Error(e);
  }
}